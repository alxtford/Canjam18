var screenFragmentSrc = [

        "precision mediump float;",

        "uniform float     time;",
        "uniform vec2      resolution;",
        "uniform vec2      playerTank;",

        "float noise(vec2 pos) {",
            "return fract(sin(dot(pos, vec2(12.9898 - time,78.233 + time))) * 43758.5453);",
        "}",

        "void main( void ) {",

            "vec2 normalPos = gl_FragCoord.xy / resolution.xy;",
            "float pos = (gl_FragCoord.y / resolution.y);",
             "float mouse_dist = length(vec2((playerTank.x - normalPos.x) * (resolution.x / resolution.y) , playerTank.y - normalPos.y));",
            "float distortion = clamp(1.0 - (0.1) * 3.0, 0.0, 1.0);",

            "pos -= (distortion * distortion) * 0.1;",

            "float c = sin(pos * 400.0) * 0.4 + 0.4;",
            "c = pow(c, 0.2);",
            "c *= 0.2;",

            "float band_pos = fract(time * 0.4) * 3.0 - 1.0;",
            "c += clamp( (1.0 - abs(band_pos - pos) * 10.0), 0.0, 1.0) * 0.1;",

            "c += distortion * 0.08;",
            "// noise",
            "c += (noise(gl_FragCoord.xy) - 0.5) * (0.09);",

            "c *= 0.8;",

            "gl_FragColor = vec4( 0.01, c - 0.18, 0.01, 0.005 );",
        "}"
    ];

var glitchFragmentSrc = [
  "precision highp float;",
  "uniform float time;",
  "uniform vec2 mouse;",
  "uniform vec2 resolution;",

  "float hash(float g){",
  	"return fract(tan((g+ time) * 112.8253367586 ));"	,
  "}",
  "void main( void ) {",
  	"vec2 position = ( gl_FragCoord.xy / resolution.xy ) + mouse / 4.0;",
  	"float color = 0.0;",
  	"color += sin( position.x * cos( time / 15.0 ) * 80.0 ) + cos( position.y * cos( time / 15.0 ) * 10.0 );",
  	"color += sin( position.y * sin( time / 10.0 ) * 40.0 ) + cos( position.x * sin( time / 25.0 ) * 40.0 );",
  	"color += sin( position.x * sin( time / 5.0 ) * 10.0 ) + sin( position.y * sin( time / 35.0 ) * 80.0 );",
  	"color *= sin( time / 10.0 ) * 0.5;",
  	"gl_FragColor = vec4( hash(gl_FragCoord.x + gl_FragCoord.y * 5000.0) * vec3(0.5), 1.0 );",
  "}"

];

var colourFragmentSrc = [

"precision mediump float;",

"uniform float time;",
"uniform vec2 mouse;",
"uniform vec2 resolution;",

"void main( void ) {",

	"vec2 position = ( gl_FragCoord.xy / resolution.xy );",

	"vec3 COLOR = vec3(0.0,0.0,0.0);",

	"float color = 0.00001;",
	"float color2 = 0.0001;",

	"float Length = 0.3;",
        "float pointX = 0.4;",
        "float pointY = 0.5;",

	"if(position.x < 0.3&&",
	  "position.x > 0.2)",
	   "{",
	        "COLOR.x = 1.0;",
	   "}",
	"if(position.x < 0.4&&",
	   "position.x > 0.3)",
	   "{",
	       "COLOR.y = 1.0;",
	   "}",
	"if(position.x < 0.5&&",
	   "position.x > 0.4)",
	   "{",
	        "COLOR.z = 1.0;",
	   "}",
	"if(position.x < 0.6&&",
	   "position.x > 0.5)",
	   "{",
	        "COLOR.x = 1.0;",
	   "}",
	"if(position.x < 0.7&&",
	   "position.x > 0.6)",
	   "{",
	        "COLOR.y = 2.0;",
	   "}",
	"if(position.x < 0.8&&",
	   "position.x > 0.7)",
	   "{",
	        "COLOR.z = 2.0;",
	   "}",
	"if(position.x < 0.8&&",
	   "position.x > 0.7)",
	   "{",
	        "COLOR.y = 2.0;",
	   "}",
	"if(position.x < 0.9&&",
	   "position.x > 0.8)",
	   "{",
	        "COLOR.y = 2.0;",
	   "}",
	"if(position.x < 1.0&&",
	   "position.x > 0.9)",
	   "{",
	        "COLOR.x = 3.0;",
	   "}",
	"if(position.x < 0.1&&",
	   "position.x > 0.0)",
	   "{",
	        "COLOR.z = 2.0;",
	   "}",
	"if(position.x < 0.2&&",
	   "position.x > 0.1)",
	   "{",
	        "COLOR.y = 2.0;",
	   "}",
	"if(position.x < 0.3+sin(time*2.0)&&",
	   "position.x > 0.2+sin(time*2.0))",
	   "{",
	        "COLOR.x = 1.0;",
	   "}",
	"if(position.x < 0.4+sin(time*1.0)&&",
	   "position.x > 0.3+sin(time*1.0))",
	   "{",
	        "COLOR.y = 1.0;",
	   "}",
	"if(position.x < 0.5+sin(time*1.0)&&",
	   "position.x > 0.4+sin(time*1.0))",
	   "{",
	        "COLOR.z = 1.0;",
	   "}",
	"if(position.x < 0.6+sin(time*1.0)&&",
	   "position.x > 0.5+sin(time*1.0))",
	   "{",
	        "COLOR.x = 1.0;",
	   "}",
	"if(position.x < 0.7+sin(time*1.0)&&",
	   "position.x > 0.6+sin(time*1.0))",
	   "{",
	        "COLOR.y = 2.0;",
	   "}",
	"if(position.x < 0.8+sin(time*1.0)&&",
	  "position.x > 0.7+sin(time*1.0))",
	   "{",
	        "COLOR.z = 2.0;",
	   "}",
	"if(position.x < 0.8+sin(time*1.0)&&",
	   "position.x > 0.7+sin(time*1.0))",
	   "{",
	        "COLOR.y = 2.0;",
	   "}",


	"/*if(position.x < pointX + Length &&",
	   "position.x > pointX - Length",
	   "//position.y < pointY + Length &&",
	   "//position.y > pointY - Length)",
	  ")",

	"{",
		"color= 1.0;",
	"}*/",
	"/*if(position.x == color)",
	"//{",
	"//	color2 = 3.2;",
	"}*/",

	"gl_FragColor = vec4( COLOR, 1.0 );",

"}"
];
